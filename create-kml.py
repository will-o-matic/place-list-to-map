import csv
from xml.etree.ElementTree import Element, SubElement, Comment, tostring, ElementTree
from xml.dom import minidom

def prettify(elem):
    """Return a pretty-printed XML string for the Element."""
    rough_string = tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")

def create_kml_file(csv_file_path, output_kml_file_path):
    # Create a mapping of emoji to style URLs
    emoji_style_mapping = {
        "üçï": "#icon-1651-F57C00-labelson-nodesc",
        "üçΩÔ∏è": "#icon-1577-F57C00-labelson-nodesc",
        "üç™": "#icon-1607-F57C00-labelson-nodesc",
        "üç®": "#icon-1607-F57C00-labelson-nodesc",
        "üßÅ": "#icon-1607-F57C00-labelson-nodesc",
        "üç∏": "#icon-1517-F57C00-labelson-nodesc",
        "üèÉ‚Äç‚ôÄÔ∏è": "#icon-1567-F57C00-labelson-nodesc",
        "‚òïÔ∏è": "#icon-1534-F57C00-labelson-nodesc",
        "ü•Ø": "#icon-1835-F57C00-labelson",
    }

    # Create root element and add document element
    kml = Element('kml', {'xmlns': 'http://www.opengis.net/kml/2.2'})
    doc = SubElement(kml, 'Document')
    doc.append(Comment('Generated by OpenAI GPT-4'))

    # Add the static style data
    for style_id in emoji_style_mapping.values():
        style = SubElement(doc, 'Style', {'id': style_id[1:]})
        icon_style = SubElement(style, 'IconStyle')
        SubElement(icon_style, 'scale').text = "1"
        icon = SubElement(icon_style, 'Icon')
        SubElement(icon, 'href').text = f'images/icon-{style_id[-6]}.png'

    # Open the CSV file and read the data
    with open(csv_file_path, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            # Find matching styleUrl for the emoji in the name
            style_url = None
            for emoji, url in emoji_style_mapping.items():
                if emoji in row['notes_emoji']:
                    style_url = url
                    break

            # Create Placemark element
            placemark = SubElement(doc, 'Placemark')

            # Add name
            SubElement(placemark, 'name').text = row['business_name'] + ' ' + row['notes_emoji']

            # Add styleUrl if found
            if style_url:
                SubElement(placemark, 'styleUrl').text = style_url

            # Add Point and coordinates
            point = SubElement(placemark, 'Point')
            coordinates = SubElement(point, 'coordinates')
            coordinates.text = f'{row["longitude"]},{row["latitude"]},0'

    # Write the KML data to a file
    with open(output_kml_file_path, 'w', encoding='utf-8') as f:
        f.write(prettify(kml))

create_kml_file('business_info.csv', 'output.kml')
